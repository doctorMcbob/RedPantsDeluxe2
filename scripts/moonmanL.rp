REDPANTSGUY|128,256,32,64|True|
START:0 moonmanstand 0,-16
IDLE:0 moonmanstand 0,-16
RUNNING:0 moonmanrun0 0,-16
RUNNING:4 moonmanrun1 0,-16
RUNNING:8 moonmanrun2 0,-16
RUNNING:12 moonmanrun3 0,-16
AIRIAL:0 moonmanjump0 0,-16
AIRIAL:0 moonmanjump2 0,-16
AIRIAL:0 moonmanjump1 0,-16
SLIDE:0 moonmanslide1 0,-16
SLIDE:0 moonmanslide0 0,-16
LANDING:0 moonmanland 0,-16
JUMPSQUAT:0 moonmanjumpsquat0 0,-16
JUMPSQUAT:3 moonmanjumpsquat1 0,-16
FLIPSQUAT:0 moonmanjumpsquat0 0,-16
FLIPSQUAT:3 moonmanjumpsquat1 0,-16
DIVESTART:0 moonmandivestart 0,-16
DIVE:0 moonmandive 0,-32
DIVELAND:0 moonmandiveland 0,-32
ROLLOUT:0 moonmanrollout -16,-32
BONK:0 moonmanbonk 0,-16
BONKLAND:0 moonmanbonkland0 0,-48
BONKLAND:12 moonmanbonkland1 0,-32
WALLTOUCH:0 moonmanwalljump0 0,-16
WALLJUMP:0 moonmanwalljump1 0,-16
WALLJUMP:3 moonmanwalljump2 0,-16
SLIDEFLIP:0 moonmansideflip0 0,-48
SLIDEFLIP:8 moonmansideflip1 -16,-48
SLIDEFLIP:10 moonmansideflip2 -32,-16
SLIDEFLIP:14 moonmansideflip3 -32,-16
SLIDEFLIP:18 moonmansideflip4 -16,-16
SLIDEFLIP:20 moonmansideflip5 0,-16
SLIDEFLIP:23 moonmansideflip6 0,-16
CROUCH:0 moonmancrouch 0,-16
LONGJUMPSTART:0 moonmanlongjump0 0,-16
LONGJUMP:0 moonmanlongjump1 0,-16
LONGJUMP:8 moonmanlongjump2 0,-16
DEAD:0 moonmandead 0,-16
HITSTUN:0 moonmanbonk 0,-16
PUNCH:0 moonmanpunch0 0,-32
PUNCH:4 moonmanpunch1 0,-16
PUNCH:6 moonmanpunch2 0,-32
PUNCH:8 moonmanpunch3 0,-16
DANGLE:0 moonmandangle 0,-16
INVISIBLE:0 empty 0,0
EMPTY:0 empty 0,0
DROWN:0 empty 0,0

|DROWN:45|
set self state IDLE
set self frame 0
exec respawn

|DANGLE:0|
rebrand moonmanD
set self state DANGLE
exec DANGLE:0

|START:0|
set self state IDLE
set self frame 0
set self speed 8
set self jumpstrength 17
set self hopstrength 12
set self divestrength 14
set self rolloutstrength 8
set self bonkstrength 2
set self walljumpstrength 12
set self walljumpoff 10
set self airdrift 0.7
set self traction 0.6 * -1
set self limit 20
set self airspeedcontrol 12
set self negairspeedcontrol self.airspeedcontrol * -1
set self negspeed self.speed * -1
set self neglimit self.limit * -1
if not self.grav
   set self grav 1
endif
set self slideflipxmod 3
set self slideflipstrength 24
set self longjumpystrength 9
set self longjumpxstrength 12
set self bloodmax 10
set self thwackmax 10
set self rotation 270
set self can_die 1

set self width 64
set self height 32

if COLLIDE?
   set self revert moonman + self.gravdir
endif

if not self.revert
   set self gravdir L
endif
if self.revert
   set self revert 0
   rebrand moonman + self.gravdir
endif
set self dustnumber 0
set self dustmax 10
set self dustfreq 4
set self dustcounter 0

|makeDust|
set self dustcounter self.dustcounter + 1
if self.dustcounter > self.dustfreq
   set self dustcounter 0
   set self dustname  dust + self.dustnumber
   set self dustnumber self.dustnumber + 1
   if self.dustnumber > self.dustmax
      set self dustnumber 0
   endif
   create dustbunny0 self.dustname dustbunny0.w / 2 * -1 + self.x + 16  self.y + self.h - dustbunny0.h
   set self.dustname x_vel self.x_vel * 1.1 
   set self.dustname y_vel self.y_vel * 1.1
endif

|DEAD:0|
set self x_vel 0
set self y_vel 0
set self can_die 0
if self.frame % 4 == 0
   create blood0 self.name + blood + self.bloodnumber self.x + 16 self.y + 16
   set self bloodnumber self.bloodnumber + 1
   if self.bloodnumber > self.bloodmax
      set self bloodnumber 0
   endif
endif

|DEAD:45|
set self state IDLE
set self frame 0
exec respawn

|respawn|
set self x self.respawnx
set self y self.respawny

if self.frame_name
   scrollbound self.frame_name left None
   scrollbound self.frame_name right None
   scrollbound self.frame_name top None
   scrollbound self.frame_name bottom None

  view self.frame_name self.respawnworld
endif

move self.name self.respawnworld
if self.lakitu
   set self.lakitu x self.x
   set self.lakitu y self.y
   move self.lakitu self.respawnworld
endif
set self can_die 1
set self tangible 0
set self state EMPTY
exec EMPTY:0

|EMPTY:0|
if COLLIDE?
   break
endif
set self tangible 1
set self state IDLE
if self.emptyto
   set self state self.emptyto
   set self emptyto 0
endif


|IDLE:0|
set self door_key RIGHT
exec checkAir
if self.y_vel != 0
   set self state SLIDE
endif
if self.x_vel == 0
   if not inpDOWN and inpUP
      set self state RUNNING
      set self frame 0
      set self direction -1
   endif
   if not inpUP and inpDOWN
      set self state RUNNING
      set self frame 0
      set self direction 1
   endif
endif
exec checkCrouch
exec checkJump
exec checkPunch
exec applyGrav

|IDLE:32|
exec IDLE:0
set self frame 0

|CROUCH:0|
exec checkAir
exec applyTraction
exec applyGrav
if not inpLEFT
   if self.y_vel == 0
      set self state IDLE
      set self frame 0
   endif
   if self.y_vel != 0
      set self state SLIDE
      set self frame 0
   endif
endif
# bufferable pog?
if self.y_vel != 0 and inpA
   set self state LONGJUMPSTART
   set self frame 0
endif
set self frame 0

|LONGJUMPSTART:0|
exec applyTraction
exec applyGrav

|LONGJUMPSTART:2|
exec LONGJUMPSTART:0
set self x_vel self.longjumpystrength
set self y_vel self.longjumpxstrength * self.direction
set self state LONGJUMP
set self frame 0

|LONGJUMP:0|
exec applyGrav
set self calc1 self.y_vel < self.negairspeedcontrol
if not self.calc1 and inpUP
   set self y_vel self.y_vel - self.airdrift
endif
set self calc1 self.y_vel > self.airspeedcontrol
if not self.calc1 and inpDOWN
   set self y_vel self.y_vel + self.airdrift
endif

|RUNNING:0|
set self y_vel self.speed * self.direction
set self calc1 self.direction == 1 nor inpDOWN
set self calc2 self.direction == -1 nor inpUP
if inpDOWN == inpUP or self.calc1 or self.calc2
   set self state SLIDE
   set self frame 0
endif
exec checkCrouch
exec checkJump
exec checkPunch
exec checkAir
exec applyGrav

|RUNNING:16|
exec RUNNING:0
set self frame 0

|SLIDE:0|
if self.y_vel == 0
   set self state IDLE
   set self frame 0
endif
exec checkPunch
if self.y_vel != 0
   exec applyTraction
   set self absxvel abs self.y_vel
   if abs self.traction * 10 > self.absxvel
      img moonmanslide1
   endif
   exec checkCrouch
   exec checkJump
   if self.state == JUMPSQUAT
      if self.direction == 1 and inpUP
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
      if self.direction == -1 and inpDOWN
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
   endif
   exec checkAir
   exec applyGrav
endif
if abs self.y_vel < self.speed

   set self calc1 self.y_vel > 0 and inpDOWN
   set self calc1 not inpUP and self.calc1

   if self.calc1
      set self direction 1
   endif
   
   set self calc2 self.y_vel < 0 and inpUP
   set self calc2 not inpDOWN and self.calc2

   if self.calc2
      set self direction -1
   endif
   
   if self.calc1 or self.calc2
      set self state RUNNING
      set self frame 0
   endif
endif

|AIRIAL:0|
set self calc1 self.x_vel > self.airspeedcontrol
set self calc2 self.airspeedcontrol * -1 > self.x_vel
#if not self.calc1 nor self.calc2
   if self.y_vel - self.airdrift > self.negspeed and inpUP
	set self y_vel self.y_vel - self.airdrift
   endif
   if self.y_vel + self.airdrift < self.speed and inpDOWN
      set self y_vel self.y_vel + self.airdrift
   endif
   if B_DOWN in inpEVENTS
      set self state DIVESTART
      set self frame 0
   endif
#endif
if UP_DOWN in inpEVENTS
      rebrand moonmanU
endif
if RIGHT_DOWN in inpEVENTS
   rebrand moonmanR
endif
if DOWN_DOWN in inpEVENTS
   rebrand moonmanD
endif
if self.calc1
   img moonmanjump0
endif
if self.calc2
   img moonmanjump2
endif
exec applyGrav

|JUMPSQUAT:0|
exec applyTraction
exec applyGrav

|JUMPSQUAT:6|
set self state AIRIAL
if inpA
   set self x_vel self.jumpstrength
endif
if not inpA
   set self x_vel self.hopstrength
endif
set self frame 0

|LANDING:0|
exec applyTraction
exec applyGrav
if self.y_vel > 0
   set self direction 1
endif
if self.y_vel < 0
   set self direction -1
endif

|LANDING:5|
if self.y_vel
   set self state SLIDE
   exec SLIDE:0
endif
if self.y_vel == 0
   set self state IDLE
   exec IDLE:0
endif

|DIVESTART:0|
set self y_vel 0
set self x_vel 0

|DIVESTART:5|
set self y_vel self.divestrength * self.direction
set self state DIVE

|DIVE:0|
exec applyGrav

|DIVELAND:0|
exec checkAir
exec applyTraction
exec applyGrav
# bufferable Pog?
if inpA
   set self state ROLLOUT
   set self frame 0
   set self x_vel self.rolloutstrength
endif
if self.y_vel == 0
   set self state IDLE
   set self frame 0
endif

|ROLLOUT:0|
exec applyGrav

|BONK:0|
exec applyGrav

|BONK:360|
set self state IDLE
set self frame 0

|BONKLAND:0|
exec checkAir
exec applyTraction
exec applyGrav

|BONKLAND:25|
set self state IDLE
set self frame 0

|WALLTOUCH:0|
exec AIRIAL:0
set self state AIRIAL
#if not self.calc1 nor self.calc2
   img moonmanwalljump0
   # bufferable pog?
   if inpA
      set self state WALLJUMP
      set self frame 0
   endif
#endif

|WALLJUMP:0|
set self x_vel 0

|WALLJUMP:6|
set self state AIRIAL
set self frame 0
set self x_vel self.walljumpstrength
set self direction self.direction * -1
set self y_vel self.walljumpoff * self.direction

|FLIPSQUAT:0|
exec applyTraction
exec applyGrav

|FLIPSQUAT:6|
set self state SLIDEFLIP
set self direction self.direction * -1
set self y_vel self.slideflipxmod * self.direction
set self x_vel self.slideflipstrength
set self frame 0

|SLIDEFLIP:0|
exec applyGrav
if self.direction == -1
   if inpUP
      	set self y_vel self.y_vel - self.airdrift
	if self.y_vel < self.negairspeedcontrol
      	   set self y_vel self.negairspeedcontrol
   	endif
   endif
endif
if self.direction == 1
   if inpDOWN
      set self y_vel self.y_vel + self.airdrift
      if self.y_vel > self.airspeedcontrol
      	 set self y_vel self.airspeedcontrol
      endif
   endif
endif

|YCOLLISION|
if abs self.y_vel < 1
   set self y_vel 0
endif
set self calc1 self.state == DIVE
set self calc1 self.state == DIVELAND or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == ROLLOUT or self.calc1
   set self state BONK
   set self y_vel self.bonkstrength * self.direction * -1
   set self frame 0
endif
set self calc1 self.state == SLIDEFLIP
if self.state == AIRIAL or self.calc1
   set self state WALLTOUCH
   set self frame 0
   if self.y_vel > 0
      set self direction 1
   endif
   if self.y_vel < 0
      set self direction -1
   endif
endif

|PUNCH:0|
exec checkAir
exec applyTraction
exec applyGrav

|PUNCH:16|
set self state IDLE
set self frame 0

|HIT|
set self state HITSTUN
set self frame 0
set self direction related.direction * -1
if related.state == DIVE
   set self hit_x_vel 15 * related.direction
   set self hit_y_vel -10
endif
if related.state == PUNCH
   set self hit_x_vel 8 * related.direction
   set self hit_y_vel -8
endif

if self.thwacks == None
   set self thwacks 1
endif

if related.x <= self.x
   set self thw_x related.x + related.w
endif
if related.x > self.x
   set self thw_x related.x
endif
if related.y <= self.y
   set self thw_y self.y + related.y - self.y
endif
if related.y > self.y
   set self thw_y self.y + self.y - related.y
endif

create thwack0 self.name + thwack + self.thwacks self.thw_x self.thw_y
set related thwacks related.thwacks + 1
if related.thwacks > related.thwackmax
   set related thwacks 0
endif

|HITSTUN:0|
set self x_vel 0
set self y_vel 0

|HITSTUN:4|
set self state BONK
set self frame 0
set self x_vel self.hit_x_vel
set self y_vel self.hit_y_vel
set self hit_x_vel 0
set self hit_y_vel 0

|XCOLLISION|
if abs self.x_vel < 1
   set self x_vel 0
endif
set self calc1 self.state == ROLLOUT
set self calc1 self.state == SLIDEFLIP or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == AIRIAL or self.calc1
   set self x_vel 0
   set self state LANDING
   set self frame 0
endif
if self.state == DIVE
   set self state DIVELAND
   set self frame 0
endif
if self.state == BONK
   set self state BONKLAND
   set self frame 0
endif

|COLLIDE|
if self.state == PLATFORM
   set self touched 1
endif
set self calc self.state == BANANA
set self calc self.state == CHEESE or self.calc
set self calc self.state == COLLECTABLE or self.calc
set self calc self.state == BOOK or self.calc
if self.state == COIN or self.calc
   set self collected 1
endif

|checkAir|
set self dangle_from 0
if self.x_vel
   set self state AIRIAL
   set self frame 0
endif

|applyGrav|
set self x_vel self.x_vel - self.grav
if self.x_vel > self.limit
   set self x_vel self.limit
endif
if self.x_vel < self.neglimit
   set self x_vel self.neglimit
endif

if abs self.x_vel < 1
   if self.x_vel > 0
      if self.grav < 0
         set self x_vel 1
      endif
   endif
   if self.x_vel < 0
      if self.grav > 0
         set self x_vel -1
      endif
   endif
endif

|applyTraction|
if self.y_vel != 0
   if self.y_vel > 0
      set self y_vel self.traction + self.y_vel
   endif
   if self.y_vel < 0
      set self y_vel self.traction * -1 + self.y_vel
   endif
   exec makeDust
endif
if abs self.y_vel / 1 == 0
   set self y_vel 0
endif

|checkCrouch|
if inpLEFT
   set self state CROUCH
   set self frame 0
endif

|checkJump|
if A_DOWN in inpEVENTS
   set self state JUMPSQUAT
   set self frame 0
endif

|checkPunch|
if B_DOWN in inpEVENTS
   set self state PUNCH
   set self frame 0
endif

