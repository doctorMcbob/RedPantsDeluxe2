REDPANTSGUY2|256,256,32,64|True|-16,0|
START:0 glassesstand
IDLE:0 glassesstand
RUNNING:0 glassesrun0
RUNNING:4 glassesrun1
RUNNING:8 glassesrun2
RUNNING:12 glassesrun3
AIRIAL:0 glassesjump1
SLIDE:0 glassesslide0
LANDING:0 glassesland
JUMPSQUAT:0 glassesjumpsquat0
JUMPSQUAT:3 glassesjumpsquat1
FLIPSQUAT:0 glassesjumpsquat0
FLIPSQUAT:3 glassesjumpsquat1
DIVESTART:0 glassesdivestart
DIVE:0 glassesdive
DIVELAND:0 glassesdiveland
ROLLOUT:0 glassesrollout
BONK:0 glassesbonk
BONKLAND:0 glassesbonkland0
BONKLAND:12 glassesbonkland1
WALLTOUCH:0 glasseswalljump0
WALLJUMP:0 glasseswalljump1
WALLJUMP:3 glasseswalljump2
SLIDEFLIP:0 glassesdiveflip0
SLIDEFLIP:8 glassesdiveflip1
SLIDEFLIP:10 glassesdiveflip2
SLIDEFLIP:14 glassesdiveflip3
SLIDEFLIP:18 glassesdiveflip4
SLIDEFLIP:20 glassesdiveflip5
SLIDEFLIP:23 glassesdiveflip6
CROUCH:0 glassescrouch
LONGJUMPSTART:0 glasseslongjumpstart
LONGJUMP:0 glasseslongjump1
LONGJUMP:8 glasseslongjump2

|START:0|
# welcome to red pants script :)
set self _input_name PLAYER4
set self state IDLE
set self frame 0
set self speed 8
set self jumpstrength -17
set self hopstrength -12
set self divestrength 14
set self rolloutstrength -8
set self bonkstrength 2
set self walljumpstrength -12
set self walljumpoff 10
set self airdrift 0.7
set self traction 0.6 * -1
set self limit 20
set self airspeedcontrol 12
set self negairspeedcontrol self.airspeedcontrol * -1
set self negspeed self.speed * -1
set self neglimit self.limit * -1
set self grav 1
set self slideflipxmod 3
set self slideflipstrength -24
set self longjumpystrength -9
set self longjumpxstrength 12
focus MAIN4 self
set self frame_name MAIN4

|IDLE:0|
exec checkAir
if self.x_vel != 0
   set self state SLIDE
endif
if self.y_vel == 0
   if not inpRIGHT and inpLEFT
      set self state RUNNING
      set self frame 0
      set self direction -1
   endif
   if not inpLEFT and inpRIGHT
      set self state RUNNING
      set self frame 0
      set self direction 1
   endif
endif
exec checkCrouch
exec checkJump
exec applyGrav

|IDLE:32|
exec IDLE:0
set self frame 0

|CROUCH:0|
exec checkAir
exec applyTraction
exec applyGrav
if not inpDOWN
   set self state IDLE
   set self frame 0
endif
# bufferable pog?
if self.x_vel != 0 and inpA
   if self.x_vel == 0
      set self state IDLE
      set self frame 0
   endif
   if self.x_vel != 0
      set self state SLIDE
      set self frame 0
   endif
endif
set self frame 0

|LONGJUMPSTART:0|
exec checkAir
exec applyTraction
exec applyGrav

|LONGJUMPSTART:2|
exec LONGJUMPSTART:0
set self y_vel self.longjumpystrength
set self x_vel self.longjumpxstrength * self.direction
set self state LONGJUMP
set self frame 0

|LONGJUMP:0|
exec applyGrav
set self calc1 self.x_vel < self.negairspeedcontrol
if not self.calc1 and inpLEFT
   set self x_vel self.x_vel - self.airdrift
endif
set self calc1 self.x_vel > self.airspeedcontrol
if not self.calc1 and inpRIGHT
   set self x_vel self.x_vel + self.airdrift
endif

|RUNNING:0|
set self x_vel self.speed * self.direction
set self calc1 self.direction == 1 nor inpRIGHT
set self calc2 self.direction == -1 nor inpLEFT
if inpRIGHT == inpLEFT or self.calc1 or self.calc2
   set self state SLIDE
   set self frame 0
endif
exec checkCrouch
exec checkJump
exec checkAir
exec applyGrav

|RUNNING:16|
exec RUNNING:0
set self frame 0

|SLIDE:0|
if self.x_vel == 0
   set self state IDLE
   set self frame 0
endif
if self.x_vel != 0
   exec applyTraction
   set self absxvel abs self.x_vel
   if abs self.traction * 10 > self.absxvel
      img glassesslide1
   endif
   exec checkCrouch
   exec checkJump
   if self.state == JUMPSQUAT
      if self.direction == 1 and inpLEFT
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
      if self.direction == -1 and inpRIGHT
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
   endif
   exec checkAir
   exec applyGrav
endif
if abs self.x_vel < self.speed
   set self calc1 self.x_vel > 0 and inpRIGHT
   set self calc1 not inpLEFT and self.calc1
   if self.calc1
      set self direction 1
   endif
   if not inpRIGHT and self.x_vel < 0 and inpLEFT
      set self direction -1
   endif
   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1
      set self state RUNNING
      set self frame 0
   endif
endif

|AIRIAL:0|
set self calc1 self.y_vel > self.airspeedcontrol
set self calc2 self.airspeedcontrol * -1 > self.y_vel
if not self.calc1 nor self.calc2
   if inpLEFT
	set self x_vel self.x_vel - self.airdrift
   	if self.x_vel < self.negspeed
      	   set self x_vel self.negspeed
   	endif
   endif
   if inpRIGHT
      set self x_vel self.x_vel + self.airdrift
      if self.x_vel > self.speed
      	 set self x_vel self.speed
      endif
   endif
   if B_DOWN in inpEVENTS
      set self state DIVESTART
      set self frame 0
   endif
endif
if self.calc1
   img glassesjump2
endif
if self.calc2
   img glassesjump0
endif
exec applyGrav

|JUMPSQUAT:0|
exec checkAir
exec applyTraction
exec applyGrav

|JUMPSQUAT:6|
set self state AIRIAL
if inpA
   set self y_vel self.jumpstrength
endif
if not inpA
   set self y_vel self.hopstrength
endif
set self frame 0

|LANDING:0|
exec checkAir
exec applyTraction
exec applyGrav
if self.x_vel > 0
   set self direction 1
endif
if self.x_vel < 0
   set self direction -1
endif

|LANDING:5|
if self.x_vel
   set self state SLIDE
   exec SLIDE:0
endif
if self.x_vel == 0
   set self state IDLE
   exec IDLE:0
endif

|DIVESTART:0|
set self y_vel 0
set self x_vel 0

|DIVESTART:5|
set self x_vel self.divestrength * self.direction
set self state DIVE

|DIVE:0|
exec applyGrav

|DIVELAND:0|
exec checkAir
exec applyTraction
exec applyGrav
# bufferable Pog?
if inpA
   set self state ROLLOUT
   set self frame 0
   set self y_vel self.rolloutstrength
endif
if self.x_vel == 0
   set self state IDLE
   set self frame 0
endif

|ROLLOUT:0|
exec applyGrav

|BONK:0|
set self x_vel self.bonkstrength * self.direction * -1
exec applyGrav

|BONKLAND:0|
exec checkAir
exec applyTraction
exec applyGrav

|BONKLAND:25|
set self state IDLE
set self frame 0

|WALLTOUCH:0|
exec AIRIAL:0
set self state AIRIAL
if not self.calc1 nor self.calc2
   img glasseswalljump0
   # bufferable pog?
   if inpA
      set self state WALLJUMP
      set self frame 0
   endif
endif

|WALLJUMP:0|
set self y_vel 0

|WALLJUMP:6|
set self state AIRIAL
set self frame 0
set self y_vel self.walljumpstrength
set self direction self.direction * -1
set self x_vel self.walljumpoff * self.direction

|FLIPSQUAT:0|
exec checkAir
exec applyTraction
exec applyGrav

|FLIPSQUAT:6|
set self state SLIDEFLIP
set self direction self.direction * -1
set self x_vel self.slideflipxmod * self.direction
set self y_vel self.slideflipstrength
set self frame 0

|SLIDEFLIP:0|
exec applyGrav
if self.direction == -1
   if inpLEFT
      	set self x_vel self.x_vel - self.airdrift
	if self.x_vel < self.negairspeedcontrol
      	   set self x_vel self.negairspeedcontrol
   	endif
   endif
endif
if self.direction == 1
   if inpRIGHT
      set self x_vel self.x_vel + self.airdrift
      if self.x_vel > self.airspeedcontrol
      	 set self x_vel self.airspeedcontrol
      endif
   endif
endif


|XCOLLISION|
set self calc1 self.state == DIVE
set self calc1 self.state == DIVELAND or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == ROLLOUT or self.calc1
   set self state BONK
   set self frame 0
endif
set self calc1 self.state == SLIDEFLIP
if self.state == AIRIAL or self.calc1
   set self state WALLTOUCH
   set self frame 0
   if self.x_vel > 0
      set self direction 1
   endif
   if self.x_vel < 0
      set self direction -1
   endif
endif

|YCOLLISION|
set self calc1 self.state == ROLLOUT
set self calc1 self.state == SLIDEFLIP or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == AIRIAL or self.calc1
   set self state LANDING
   set self frame 0
endif
if self.state == DIVE
   set self state DIVELAND
   set self frame 0
endif
if self.state == BONK
   set self state BONKLAND
   set self frame 0
endif

|COLLIDE|
if self.state == PLATFORM
   set self touched 1
endif

|checkAir|
if self.y_vel
   set self state AIRIAL
   set self frame 0
endif

|applyGrav|
set self y_vel self.y_vel + self.grav
if self.y_vel > self.limit
   set self y_vel self.limit
endif
if self.y_vel < self.neglimit
   set self y_vel self.neglimit
endif

|applyTraction|
if self.x_vel != 0
   if self.x_vel > 0
      set self x_vel self.traction + self.x_vel
   endif
   if self.x_vel < 0
      set self x_vel self.traction * -1 + self.x_vel
   endif
endif
if abs self.x_vel / 1 == 0
   set self x_vel 0
endif

|checkCrouch|
if inpDOWN
   set self state CROUCH
   set self frame 0
endif

|checkJump|
if A_DOWN in inpEVENTS
   set self state JUMPSQUAT
   set self frame 0
endif

