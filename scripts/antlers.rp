REDPANTSGUY|128,256,32,64|True|
START:0 antlerstand -32,-16
IDLE:0 antlerstand -32,-16
RUNNING:0 antlerrun0 -32,-16
RUNNING:4 antlerrun1 -32,-16
RUNNING:8 antlerrun2 -32,-16
RUNNING:12 antlerrun3 -32,-16
AIRIAL:0 antlerjump0 -32,-16
AIRIAL:0 antlerjump2 -32,-16
AIRIAL:0 antlerjump1 -32,-16
FLYSTART:0 antlerdivestart -32,-16
FLY:0  antlerflydown1 -32,0
FLY:0  antlerflydown0 -48,-16
FLY:0  antlerflyup1 -48,0
FLY:0  antlerflyup0 -48,0
FLY:0  antlerfly0 -48,0
ROLLOUT:0 antlerrollout -48,0
FLYLAND:0 antlerdiveland -48,-16
SLIDE:0 antlerslide1 -32,-16
SLIDE:0 antlerslide0 -32,-16
LANDING:0 antlerland -32,-16
JUMPSQUAT:0 antlerjumpsquat0 -32,-16
JUMPSQUAT:3 antlerjumpsquat1 -32,-16
FLIPSQUAT:0 antlerjumpsquat0 -32,-16
FLIPSQUAT:3 antlerjumpsquat1 -32,-16
BONK:0 antlerbonk -48,-16
BONKLAND:0 antlerbonkland0 -64,-16
BONKLAND:12 antlerbonkland1 -48,-16
WALLTOUCH:0 antlerwalljump0 -32,-16
WALLJUMP:0 antlerwalljump1 -32,-16
WALLJUMP:3 antlerwalljump2 -32,-16
SLIDEFLIP:0 antlersideflip0 -48,-16
SLIDEFLIP:8 antlersideflip1 -48,-16
SLIDEFLIP:10 antlersideflip2 -48,-16
SLIDEFLIP:14 antlersideflip3 -32,-16
SLIDEFLIP:18 antlersideflip4 -32,-16
SLIDEFLIP:20 antlersideflip5 -48,-16
SLIDEFLIP:23 antlersideflip6 -32,-16
CROUCH:0 antlercrouch -32,-16
LONGJUMPSTART:0 antlerlongjump0 -32,-16
LONGJUMP:0 antlerlongjump1 -32,-16
LONGJUMP:8 antlerlongjump2 -32,-16
DEAD:0 antlerdead -32,-16
HITSTUN:0 antlerbonk -48,-16
PUNCH:0 antlerpunch0 -32,-16
PUNCH:4 antlerpunch1 -32,-16
PUNCH:6 antlerpunch2 -32,-16
PUNCH:8 antlerpunch3 -32,-16

|START:0|
set self state IDLE
set self frame 0
set self speed 8
set self jumpstrength -17
set self hopstrength -12
set self flystrength 14
set self rolloutstrength -8
set self bonkstrength 2
set self walljumpstrength -12
set self walljumpoff 10
set self airdrift 0.7
set self traction 0.6 * -1
set self limit 20
set self airspeedcontrol 12
set self negairspeedcontrol self.airspeedcontrol * -1
set self negspeed self.speed * -1
set self neglimit self.limit * -1
set self grav 1
set self slideflipxmod 3
set self slideflipstrength -24
set self longjumpystrength -9
set self longjumpxstrength 12
set self flydownbuffer 3
set self flyupbuffer 4
set self door_key UP

set self can_die 1
set self respawnx self.x
set self respawny self.y

set self flyangle 0
set self rotation 0

set self width 32
set self height 64


|DEAD:0|
set self x_vel 0
set self y_vel 0
set self can_die 0
if self.frame % 4 == 0
   create blood0 self.name + blood + self.bloodnumber self.x + 16 self.y + 16
   set self bloodnumber self.bloodnumber + 1
endif

|DEAD:45|
set self state IDLE
self self frame 0
set self x self.respawnx
set self y self.respawny
set self can_die 1

|IDLE:0|
exec checkAir
if self.x_vel != 0
   set self state SLIDE
endif
if self.y_vel == 0
   if not inpRIGHT and inpLEFT
      set self state RUNNING
      set self frame 0
      set self direction -1
   endif
   if not inpLEFT and inpRIGHT
      set self state RUNNING
      set self frame 0
      set self direction 1
   endif
endif
exec checkCrouch
exec checkJump
exec checkPunch
exec applyGrav

|IDLE:32|
exec IDLE:0
set self frame 0

|CROUCH:0|
exec checkAir
exec applyTraction
exec applyGrav
if not inpDOWN
   if self.x_vel == 0
      set self state IDLE
      set self frame 0
   endif
   if self.x_vel != 0
      set self state SLIDE
      set self frame 0
   endif
endif
# bufferable pog?
if self.x_vel != 0 and inpA
   set self state LONGJUMPSTART
   set self frame 0
endif
set self frame 0

|LONGJUMPSTART:0|
exec checkAir
exec applyTraction
exec applyGrav

|LONGJUMPSTART:2|
exec LONGJUMPSTART:0
set self y_vel self.longjumpystrength
set self x_vel self.longjumpxstrength * self.direction
set self state LONGJUMP
set self frame 0

|LONGJUMP:0|
exec applyGrav
set self calc1 self.x_vel < self.negairspeedcontrol
if not self.calc1 and inpLEFT
   set self x_vel self.x_vel - self.airdrift
endif
set self calc1 self.x_vel > self.airspeedcontrol
if not self.calc1 and inpRIGHT
   set self x_vel self.x_vel + self.airdrift
endif

|RUNNING:0|
set self x_vel self.speed * self.direction
set self calc1 self.direction == 1 nor inpRIGHT
set self calc2 self.direction == -1 nor inpLEFT
if inpRIGHT == inpLEFT or self.calc1 or self.calc2
   set self state SLIDE
   set self frame 0
endif
exec checkCrouch
exec checkJump
exec checkPunch
exec checkAir
exec applyGrav

|RUNNING:16|
exec RUNNING:0
set self frame 0

|SLIDE:0|
if self.x_vel == 0
   set self state IDLE
   set self frame 0
endif
exec checkPunch
if self.x_vel != 0
   exec applyTraction
   set self absxvel abs self.x_vel
   if abs self.traction * 10 > self.absxvel
      img antlerslide1
   endif
   exec checkCrouch
   exec checkJump
   if self.state == JUMPSQUAT
      if self.direction == 1 and inpLEFT
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
      if self.direction == -1 and inpRIGHT
      	 set self state FLIPSQUAT
	 set self frame 0
      endif
   endif
   exec checkAir
   exec applyGrav
endif
if abs self.x_vel < self.speed
   set self calc1 self.x_vel > 0 and inpRIGHT
   set self calc1 not inpLEFT and self.calc1
   if self.calc1
      set self direction 1
   endif
   if not inpRIGHT and self.x_vel < 0 and inpLEFT
      set self direction -1
   endif
   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1
      set self state RUNNING
      set self frame 0
   endif
endif

|AIRIAL:0|
set self calc1 self.y_vel > self.airspeedcontrol
set self calc2 self.airspeedcontrol * -1 > self.y_vel
if not self.calc1 nor self.calc2
   if self.x_vel - self.airdrift > self.negspeed and inpLEFT
	set self x_vel self.x_vel - self.airdrift
   endif
   if self.x_vel + self.airdrift < self.speed and inpRIGHT
      set self x_vel self.x_vel + self.airdrift
   endif
   if B_DOWN in inpEVENTS
      set self state FLYSTART
      set self frame 0
   endif
endif
if self.calc1
   img antlerjump2
endif
if self.calc2
   img antlerjump0
endif
exec applyGrav

|JUMPSQUAT:0|
exec checkAir
exec applyTraction
exec applyGrav

|JUMPSQUAT:6|
set self state AIRIAL
if inpA
   set self y_vel self.jumpstrength
endif
if not inpA
   set self y_vel self.hopstrength
endif
set self frame 0

|LANDING:0|
exec checkAir
exec applyTraction
exec applyGrav
if self.x_vel > 0
   set self direction 1
endif
if self.x_vel < 0
   set self direction -1
endif

|LANDING:5|
if self.x_vel
   set self state SLIDE
   exec SLIDE:0
endif
if self.x_vel == 0
   set self state IDLE
   exec IDLE:0
endif

|FLYSTART:0|
set self y_vel 0
set self x_vel 0

|FLYSTART:9|
set self state FLY
set self flyangle 0

|FLY:0|

set self calc1 self.direction == 1
set self calc2 self.frame > self.flyupbuffer and inpLEFT and self.calc1
set self calc3 self.direction == -1
set self calc4 self.frame > self.flyupbuffer and inpRIGHT and self.calc3

if self.calc2 or self.calc4
   set self frame 0
   set self flyangle self.flyangle + 1
   if self.flyangle > 2
      set self flyangle 2
   endif
endif

set self calc1 self.direction == -1
set self calc2 self.frame > self.flydownbuffer and inpLEFT and self.calc1
set self calc3 self.direction == 1
set self calc4 self.frame > self.flydownbuffer and inpRIGHT and self.calc3

if self.calc2 or self.calc4
   set self frame 0
   set self flyangle self.flyangle - 1
   if self.flyangle < -2
      set self flyangle -2
   endif
endif

if self.flyangle == 0
   img antlerfly0
   set self y_vel 0
   set self x_vel self.flystrength * self.direction
endif

if self.flyangle == 1
   img antlerflyup0
   set self y_vel 0 - self.flystrength / 3
   set self x_vel self.flystrength * self.direction / 3 * 2
endif

if self.flyangle == 2
   img antlerflyup1
   set self y_vel 0 - self.flystrength
   set self x_vel self.flystrength * self.direction / 3
endif

if self.flyangle == -1
   img antlerflydown0
   set self y_vel self.flystrength / 3
   set self x_vel self.flystrength * self.direction / 3 * 3.5
endif

if self.flyangle == -2
   img antlerflydown1
   set self y_vel self.flystrength
   set self x_vel self.flystrength * self.direction / 3
endif

|FLYLAND:0|
exec checkAir
exec applyTraction
exec applyGrav
# bufferable Pog?
if inpA
   set self state ROLLOUT
   set self frame 0
   set self y_vel self.rolloutstrength
endif
if self.x_vel == 0
   set self state IDLE
   set self frame 0
endif

|ROLLOUT:0|
exec applyGrav

|BONK:0|
set self x_vel self.bonkstrength * self.direction * -1
exec applyGrav

|BONKLAND:0|
exec checkAir
exec applyTraction
exec applyGrav

|BONKLAND:25|
set self state IDLE
set self frame 0

|WALLTOUCH:0|
exec AIRIAL:0
set self state AIRIAL
if not self.calc1 nor self.calc2
   img antlerwalljump0
   # bufferable pog?
   if inpA
      set self state WALLJUMP
      set self frame 0
   endif
endif

|WALLJUMP:0|
set self y_vel 0

|WALLJUMP:6|
set self state AIRIAL
set self frame 0
set self y_vel self.walljumpstrength
set self direction self.direction * -1
set self x_vel self.walljumpoff * self.direction

|FLIPSQUAT:0|
exec checkAir
exec applyTraction
exec applyGrav

|FLIPSQUAT:6|
set self state SLIDEFLIP
set self direction self.direction * -1
set self x_vel self.slideflipxmod * self.direction
set self y_vel self.slideflipstrength
set self frame 0

|SLIDEFLIP:0|
exec applyGrav
if self.direction == -1
   if inpLEFT
      	set self x_vel self.x_vel - self.airdrift
	if self.x_vel < self.negairspeedcontrol
      	   set self x_vel self.negairspeedcontrol
   	endif
   endif
endif
if self.direction == 1
   if inpRIGHT
      set self x_vel self.x_vel + self.airdrift
      if self.x_vel > self.airspeedcontrol
      	 set self x_vel self.airspeedcontrol
      endif
   endif
endif

|PUNCH:0|
exec checkAir
exec applyTraction
exec applyGrav

|PUNCH:16|
set self state IDLE
set self frame 0

|HIT|
set self state HITSTUN
set self frame 0
set self direction related.direction * -1
if related.state == PUNCH
   set self hit_x_vel 8 * related.direction
   set self hit_y_vel -8
endif

if self.thwacks == None
   set self thwacks 1
endif

if related.x <= self.x
   set self thw_x related.x + related.w
endif
if related.x > self.x
   set self thw_x related.x
endif
if related.y <= self.y
   set self thw_y self.y + related.y - self.y
endif
if related.y > self.y
   set self thw_y self.y + self.y - related.y
endif

create thwack0 self.name + thwack + self.thwacks self.thw_x self.thw_y
set self thwacks self.thwacks + 1

|HITSTUN:0|
set self x_vel 0
set self y_vel 0

|HITSTUN:4|
set self state BONK
set self frame 0
set self x_vel self.hit_x_vel
set self y_vel self.hit_y_vel
set self hit_x_vel 0
set self hit_y_vel 0

|XCOLLISION|
set self calc1 abs self.flyangle != 2
set self calc1 self.state == FLY and self.calc1
set self calc1 self.state == FLYLAND or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == ROLLOUT or self.calc1
   set self state BONK
   set self frame 0
endif
set self calc1 abs self.flyangle == 2
set self calc1 self.state == FLY and self.calc1
set self calc1 self.state == SLIDEFLIP or self.calc1
if self.state == AIRIAL or self.calc1
   set self state WALLTOUCH
   set self frame 0
   if self.x_vel > 0
      set self direction 1
   endif
   if self.x_vel < 0
      set self direction -1
   endif
endif

|YCOLLISION|
set self calc1 self.state == ROLLOUT
set self calc1 self.state == SLIDEFLIP or self.calc1
set self calc1 self.state == LONGJUMP or self.calc1
if self.state == AIRIAL or self.calc1
   set self state LANDING
   set self frame 0
endif
if self.state == FLY
   set self state FLYLAND
   set self frame 0
endif
if self.state == BONK
   set self state BONKLAND
   set self frame 0
endif

|COLLIDE|
if self.state == PLATFORM
   set self touched 1
endif
set self calc self.state == BANANA
set self calc self.state == CHEESE or self.calc
if self.state == COIN or self.calc
   set self collected 1
endif

|checkAir|
if self.y_vel
   set self state AIRIAL
   set self frame 0
endif

|applyGrav|
set self y_vel self.y_vel + self.grav
if self.y_vel > self.limit
   set self y_vel self.limit
endif
if self.y_vel < self.neglimit
   set self y_vel self.neglimit
endif

|applyTraction|
if self.x_vel != 0
   if self.x_vel > 0
      set self x_vel self.traction + self.x_vel
   endif
   if self.x_vel < 0
      set self x_vel self.traction * -1 + self.x_vel
   endif
endif
if abs self.x_vel / 1 == 0
   set self x_vel 0
endif

|checkCrouch|
if inpDOWN
   set self state CROUCH
   set self frame 0
endif

|checkJump|
if A_DOWN in inpEVENTS
   set self state JUMPSQUAT
   set self frame 0
endif

|checkPunch|
if B_DOWN in inpEVENTS
   set self state PUNCH
   set self frame 0
endif
