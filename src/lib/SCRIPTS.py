SCRIPTS = {'platform': {'START:0': ['', 'set self state PLATFORM', 'set self platform 1', 'set self frame 0', 'set self touched 0', ''], 'PLATFORM:0': ['', 'if self.touched > 0', '    set self state TOUCHED', 'endif', 'set self frame 0', ''], 'TOUCHED:0': ['', 'set self frame 0']}, 'player': {'START:0': ['', '# welcome to red pants script :)', 'set self _input_name PLAYER1', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'focus MAIN self', 'set self frame_name MAIN', 'hitboxes redpantsguy', 'hurtboxes redpantsguy', 'set self base player', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', 'set self rotation 0', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'antlers': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self flystrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'set self flydownbuffer 3', 'set self flyupbuffer 4', '', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', '', 'set self flyangle 0', 'set self rotation 0', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img antlerslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state FLYSTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img antlerjump2', 'endif', 'if self.calc2', '   img antlerjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'FLYSTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'FLYSTART:9': ['', 'set self state FLY', 'set self flyangle 0', ''], 'FLY:0': ['', '', 'set self calc1 self.direction == 1', 'set self calc2 self.frame > self.flyupbuffer and inpLEFT and self.calc1', 'set self calc3 self.direction == -1', 'set self calc4 self.frame > self.flyupbuffer and inpRIGHT and self.calc3', '', 'if self.calc2 or self.calc4', '   set self frame 0', '   set self flyangle self.flyangle + 1', '   if self.flyangle > 2', '      set self flyangle 2', '   endif', 'endif', '', 'set self calc1 self.direction == -1', 'set self calc2 self.frame > self.flydownbuffer and inpLEFT and self.calc1', 'set self calc3 self.direction == 1', 'set self calc4 self.frame > self.flydownbuffer and inpRIGHT and self.calc3', '', 'if self.calc2 or self.calc4', '   set self frame 0', '   set self flyangle self.flyangle - 1', '   if self.flyangle < -2', '      set self flyangle -2', '   endif', 'endif', '', 'if self.flyangle == 0', '   img antlerfly0', '   set self y_vel 0', '   set self x_vel self.flystrength * self.direction', 'endif', '', 'if self.flyangle == 1', '   img antlerflyup0', '   set self y_vel 0 - self.flystrength / 3', '   set self x_vel self.flystrength * self.direction / 3 * 2', 'endif', '', 'if self.flyangle == 2', '   img antlerflyup1', '   set self y_vel 0 - self.flystrength', '   set self x_vel self.flystrength * self.direction / 3', 'endif', '', 'if self.flyangle == -1', '   img antlerflydown0', '   set self y_vel self.flystrength / 3', '   set self x_vel self.flystrength * self.direction / 3 * 3.5', 'endif', '', 'if self.flyangle == -2', '   img antlerflydown1', '   set self y_vel self.flystrength', '   set self x_vel self.flystrength * self.direction / 3', 'endif', ''], 'FLYLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img antlerwalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 abs self.flyangle != 2', 'set self calc1 self.state == FLY and self.calc1', 'set self calc1 self.state == FLYLAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 abs self.flyangle == 2', 'set self calc1 self.state == FLY and self.calc1', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == FLY', '   set self state FLYLAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'antlerhat': {'START:0': ['', 'set self state HAT', ''], 'HAT:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.hat != antlers', '      rebrand antlers', '      set self hat antlers', '   endif', 'endif']}, 'world1door': {'START:0': ['', 'set self state DOOR', ''], 'DOOR:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if UP_DOWN in inpEVENTS ', '   move self world1', '   view self.frame_name world1', '   set self respawnx self.x', '   set self respawny self.y', '   remove inpEVENTS UP_DOWN', 'endif']}, 'world2door': {'START:0': ['', 'set self state DOOR', ''], 'DOOR:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if UP_DOWN in inpEVENTS ', '   move self world2', '   view self.frame_name world2', '   set self respawnx self.x', '   set self respawny self.y', '   remove inpEVENTS UP_DOWN', 'endif']}, 'rootdoor': {'START:0': ['', 'set self state DOOR', ''], 'DOOR:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if UP_DOWN in inpEVENTS ', '   move self root', '   view self.frame_name root', '   set self respawnx self.x', '   set self respawny self.y', '   remove inpEVENTS UP_DOWN', 'endif']}, 'world3door': {'START:0': ['', 'set self state DOOR', ''], 'DOOR:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if UP_DOWN in inpEVENTS ', '   move self world3', '   view self.frame_name world3', '   set self respawnx self.x', '   set self respawny self.y', '   remove inpEVENTS UP_DOWN', 'endif']}, 'spike': {'START:0': ['', 'set self state SPIKE', 'set self rotation 0', ''], 'SPIKE:0': ['', 'set self frame 0', 'hitboxes spike0', ''], 'HIT': ['', 'if self.can_die', '   set self state DEAD', '   set self frame 0', 'endif']}, 'coin': {'START:0': ['', 'set self state COIN', 'set self frame 0', 'set self collected 0', ''], 'COIN:0': ['', 'if self.collected', '   set self state COLLECT', '   set self frame 0', 'endif', ''], 'COIN:24': ['', 'set self frame 0', 'exec COIN:0', ''], 'COLLECT:0': ['', 'set self y self.y - 3', ''], 'COLLECT:20': ['', 'goodbye', ''], 'COLLIDE': ['', 'if self.coins', '   set self coins self.coins + 1', 'endif', 'if not self.coins', '   set self coins 1', 'endif']}, 'banana': {'START:0': ['', 'set self state BANANA', 'set self frame 0', 'set self collected 0', ''], 'BANANA:0': ['', 'if self.collected', '   set self state COLLECT', '   set self frame 0', 'endif', 'set self frame 0', ''], 'COLLECT:0': ['', 'set self y self.y - 3', ''], 'COLLECT:20': ['', 'goodbye', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.bananas', '      set self bananas self.bananas + 1', '   endif', '   if not self.bananas', '      set self bananas 1', '   endif', 'endif', '']}, 'cheese': {'START:0': ['', 'set self state CHEESE', 'set self frame 0', 'set self collected 0', ''], 'CHEESE:0': ['', 'if self.collected', '   set self state COLLECT', '   set self frame 0', 'endif', ''], 'COLLECT:0': ['', 'set self y self.y - 3', ''], 'COLLECT:20': ['', 'goodbye', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.cheese', '      set self cheese self.cheese + 1', '   endif', '   if not self.cheese', '      set self cheese 1', '   endif', 'endif', '']}, 'demostartdoor': {'START:0': ['', 'set self state DOOR', ''], 'DOOR:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if UP_DOWN in inpEVENTS ', '   move self demostart', '   view self.frame_name demostart', '   set self respawnx self.x', '   set self respawny self.y', '   remove inpEVENTS UP_DOWN', 'endif']}, 'player2': {'START:0': ['', '# welcome to red pants script :)', 'set self _input_name PLAYER2', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'focus MAIN2 self', 'set self frame_name MAIN2', '', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'player3': {'START:0': ['', '# welcome to red pants script :)', 'set self _input_name PLAYER3', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'focus MAIN3 self', 'set self frame_name MAIN3', '', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'player4': {'START:0': ['', '# welcome to red pants script :)', 'set self _input_name PLAYER4', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'focus MAIN4 self', 'set self frame_name MAIN4', '', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'fighterhat': {'START:0': ['', 'set self state HAT', ''], 'HAT:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.hat != fighter', '      rebrand fighter', '      set self hat fighter', '   endif', 'endif']}, 'fighter': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'set self kickseverity 8', 'set self tatsuspeed 9', 'set self slidekickspeed 9', 'set self fireballnumber 0', '', 'set self fireballxmod -7', 'set self fireballymod -8', 'set self shoryuxstr 5', 'set self shoryuystr -14', 'set self tatsuflipxmod 9', 'set self tatsuflipymod -7', '', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', 'set self rotation 0', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkPunch', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', '', 'set self calc inpRIGHT and self.direction == 1', 'set self calc inpLEFT and self.direction == -1 or self.calc', 'if inpB', '   if self.calc', '      set self state HADOKEN', '   endif', '   if not self.calc', '      set self state SLIDEKICK', '      set self x_vel self.direction * self.slidekickspeed', '   endif', '   set self frame 0', 'endif', 'set self frame 0', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkPunch', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'exec checkPunch', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img fighterslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', '   if B_DOWN in inpEVENTS and inpUP', '      set self state SHORYUSTART', '   endif', '   set self calc inpRIGHT and self.direction == -1', '   set self calc inpLEFT and self.direction == 1 or self.calc', '   if B_DOWN in inpEVENTS and self.calc', '      set self state TATSUSTART', '      set self frame 0', '   endif', '   set self calc inpRIGHT and self.direction == 1', '   set self calc inpLEFT and self.direction == -1 or self.calc', '   if B_DOWN in inpEVENTS and self.calc and inpDOWN', '      set self state AIRHADOKEN', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img fighterjump2', 'endif', 'if self.calc2', '   img fighterjump0', 'endif', 'exec applyGrav', ''], 'AIRHADOKEN:0': ['', 'exec applyGrav', ''], 'AIRHADOKEN:12': ['', 'set self x_vel self.fireballxmod * self.direction', 'set self y_vel self.fireballymod', 'create airfireball self.name + fireball + self.fireballnumber self.x self.y', 'set self.name + fireball + self.fireballnumber direction self.direction', 'set self fireballnumber self.fireballnumber + 1', 'exec applyGrav', ''], 'AIRHADOKEN:13': ['', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVEKICK', ''], 'DIVEKICK:0': ['', 'exec applyGrav', ''], 'SLIDEKICK:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img fighterwalltouch', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'PUNCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'PUNCH:9': ['', 'exec PUNCH:0', 'exec checkKick', ''], 'PUNCH:16': ['', 'set self state IDLE', 'set self frame 0', ''], 'KICK:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'KICK:20': ['', 'set self state IDLE', 'set self frame 0', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', ''], 'TATSUSTART:0': ['', 'set self x_vel 0', 'set self y_vel 0', ''], 'TATSUSTART:8': ['', 'set self x_vel self.direction * self.tatsuspeed', 'set self state TATSU', 'set self frame 0', ''], 'TATSU:16': ['', 'set self frame 0', ''], 'TATSUFLIP:0': ['', 'exec applyGrav', ''], 'TATSUFLIP:8': ['', 'applyGrav', 'exec AIRIAL:0', ''], 'SHORYUSTART:7': ['', 'set self state SHORYU', 'set self frame 0', 'set self x_vel self.direction * self.shoryuxstr', 'set self y_vel self.shoryuystr', ''], 'SHORYU:0': ['', 'exec applyGrav', 'if self.y_vel > 0', '   set self state SHORYUFALL', '   set self frame 0', 'endif', ''], 'SHORYUFALL:0': ['', 'exec SLIDEFLIP:0', ''], 'HADOKEN:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'HADOKEN:12': ['', 'exec HADOKEN:0', 'create fireball self.name + fireball + self.fireballnumber self.x self.y', 'set self.name + fireball + self.fireballnumber direction self.direction', 'set self fireballnumber self.fireballnumber + 1', ''], 'HADOKEN:13': ['', 'exec HADOKEN:0', ''], 'HADOKEN:20': ['', 'set self state IDLE', 'set self frame 0', 'exec IDLE:0', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVEKICK', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SHORYUFALL', 'set self calc1 self.state == TATSUFLIP or self.calc1', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', 'if self.state == TATSU', '   if inpA', '      set self state TATSUFLIP', '      set self frame 0', '      set self x_vel self.tatsuflipxmod * self.direction * -1', '       set self y_vel self.tatsuflipymod', '   endif', '   if not inpA', '      set self state BONK', '      set self frame 0', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == SHORYUFALL', 'set self calc1 self.state == TATSUFLIP or self.calc1', 'set self calc1 self.state == ROLLOUT or self.calc1', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'set self calc1 self.state == AIRHADOKEN or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVEKICK', '   set self state SLIDEKICK', '   set self frame 0', 'endif', 'if self.state == SLIDEKICK', '   set self y_vel -1 * self.y_vel * 0.8', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', ''], 'checkPunch': ['', 'if B_DOWN in inpEVENTS', '   set self state PUNCH', '   if inpUP', '      set self state SHORYUSTART', '   endif', '   set self frame 0', 'endif', ''], 'checkKick': ['', '# bufferable pog?', 'if inpB', '   set self x_vel self.direction * self.kickseverity', '   set self state KICK', '   set self frame 0', 'endif', '']}, 'fireball': {'START:0': ['', 'set self speed 8', 'set self framelifespan 160', 'set self state FIREBALL', 'set self frame 0', ''], 'FIREBALL:0': ['', 'set self x self.direction * self.speed + self.x', 'set self framelifespan self.framelifespan - 1', 'if self.framelifespan < 0', '   goodbye', 'endif', ''], 'FIREBALL:10': ['', 'set self frame 2', 'exec FIREBALL:0', '']}, 'airfireball': {'START:0': ['', 'set self speed 8', 'set self framelifespan 160', 'set self state FIREBALL', 'set self frame 0', 'set self y_vel 8', ''], 'FIREBALL:0': ['', 'set self x self.direction * self.speed + self.x', 'set self y self.y_vel + self.y', 'set self framelifespan self.framelifespan - 1', 'if self.framelifespan < 0', '   goodbye', 'endif', ''], 'FIREBALL:6': ['', 'set self frame 2', 'exec FIREBALL:0', '']}, 'enflamed': {'START:0': ['', 'set self state FLAMING', 'set self frame 0', 'set self speed 8', 'set self burnoutspeed 5', 'set self jumpstrength -17', 'set self grav 1', 'if self.direction == 0', '   set self direction 1', 'endif', 'set self limit 20', 'set self neglimit self.limit * -1', 'set self x_vel 0', 'set self y_vel 0', 'set self burnoutframes 90', 'set self mashout 0', 'set self mashlimit 30', 'set self rotation 0', ''], 'FLAMING:16': ['', 'set self state FIRERUN', 'set self frame 0', ''], 'FIRERUN:0': ['', 'set self x_vel self.direction * self.speed', 'if inpA', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', 'if inpB or inpUP or inpDOWN or inpLEFT or inpRIGHT', '   set self mashout self.mashout + 1', 'endif', 'if self.mashout > self.mashlimit', '   set self state BURNOUT', '   set self frame 0', 'endif', 'exec checkAir', 'exec applyGrav', ''], 'FIRERUN:12': ['', 'exec FIRERUN:0', 'set self frame 0', ''], 'BURNOUT:0': ['', 'set self x_vel self.direction * self.burnoutspeed', 'set self burnoutframes self.burnoutframes - 1', 'if self.burnoutframes <= 0', '   set self state DEFLAME', '   set self frame 0', 'endif', 'exec checkAir', 'exec applyGrav', ''], 'BURNOUT:16': ['', 'exec BURNOUT:0', 'set self frame 0', ''], 'DEFLAME:0': ['', 'set self x_vel 0', 'set self y_vel 0', ''], 'DEFLAME:12': ['', 'set self hat 0', 'rebrand self.base', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyGrav', ''], 'JUMPSQUAT:4': ['', 'set self frame 0', 'set self state FIREJUMP', 'set self y_vel self.jumpstrength', ''], 'FIREJUMP:0': ['', 'set self x_vel self.direction * self.speed', 'exec applyGrav', ''], 'FIREJUMP:12': ['', 'exec FIREJUMP:0', 'set self frame 0', ''], 'BURNOUTJUMP:0': ['', 'set self x_vel self.direction * self.burnoutspeed', 'set self burnoutframes self.burnoutframes - 1', 'exec applyGrav', ''], 'BURNOUTJUMP:12': ['', 'exec BURNOUTJUMP:0', 'set self frame 0', ''], 'TURNAROUND:3': ['', 'set self direction self.direction * -1', 'set self state FIRERUN', 'set self frame 0', ''], 'BURNOUTTURNAROUND:6': ['', 'set self direction self.direction * -1', 'set self state BURNOUT', 'set self frame 0', ''], 'XCOLLISION': ['', 'set self x_vel 0', 'if self.state != FLAMING', '   set self calc self.state != BURNOUT', '   if self.state != BURNOUTJUMP and self.calc', '      set self state TURNAROUND', '   endif', '   set self calc self.state == BURNOUT', '   if  self.state == BURNOUTJUMP or self.calc', '       set self state BURNOUTTURNAROUND', '   endif', '   set self frame 0', 'endif', ''], 'YCOLLISION': ['', 'if self.state == FIREJUMP', '   set self state FIRERUN', '   set self frame 0', 'endif', 'if self.state == BURNOUTJUMP', '   set self state BURNOUT', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   if self.state != BURNOUT', '      set self state FIREJUMP', '   endif', '   if self.state == BURNOUT', '      set self state BURNOUTJUMP', '   endif', '   set self frame 0', 'endif', '']}, 'torch': {'START:0': ['', 'set self state TORCH', 'set self frame 0', ''], 'TORCH:8': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.hat != enflamed', '      rebrand enflamed', '      set self hat enflamed', '   endif', 'endif', '']}, 'shadowshoes': {'START:0': ['', '# welcome to red pants script :)', 'set self state IDLE', 'set self frame 0', 'set self speed 10', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.3 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', 'hitboxes redpantsguy', 'hurtboxes redpantsguy', 'set self can_die 1', 'set self respawnx self.x', 'set self respawny self.y', 'set self rotation 0', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', 'exec checkJump', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img shadowshoeslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if self.x_vel - self.airdrift > self.negspeed and inpLEFT', '\tset self x_vel self.x_vel - self.airdrift', '   endif', '   if self.x_vel + self.airdrift < self.speed and inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img shadowshoejump2', 'endif', 'if self.calc2', '   img shadowshoejump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img shadowshoewalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'shadowshoesshoes': {'START:0': ['', 'set self state HAT', ''], 'HAT:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.hat != shadowshoes', '      rebrand shadowshoes', '      set self hat shadowshoes', '   endif', 'endif']}, 'moonmanhat': {'START:0': ['', 'set self state HAT', ''], 'HAT:0': ['', 'set self frame 0', ''], 'COLLIDE': ['', 'if player in self.name', '   if self.hat != moonman', '      rebrand moonmanD', '      set self hat moonman', '   endif', 'endif']}, 'moonmanD': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', '', 'set self rotation 0', 'set self can_die 1', '', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if inpLEFT', '      rebrand moonmanL', '   endif', '   if inpUP', '      rebrand moonmanU', '   endif', '   if inpRIGHT', '      rebrand moonmanR', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel + self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'moonmanL': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength 17', 'set self hopstrength 12', 'set self divestrength 14', 'set self rolloutstrength 8', 'set self bonkstrength 2', 'set self walljumpstrength 12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength 24', 'set self longjumpystrength 9', 'set self longjumpxstrength 12', '', 'set self rotation 270', 'set self can_die 1', '', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.y_vel != 0', '   set self state SLIDE', 'endif', 'if self.x_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.y_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.y_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.y_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self x_vel self.longjumpystrength', 'set self y_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.y_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self y_vel self.y_vel - self.airdrift', 'endif', 'set self calc1 self.y_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self y_vel self.y_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self y_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.y_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.y_vel != 0', '   exec applyTraction', '   set self absxvel abs self.y_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.y_vel < self.speed', '   set self calc1 self.y_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.y_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.y_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.x_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.x_vel', 'if not self.calc1 nor self.calc2', '   if inpUP', '      rebrand moonmanU', '   endif', '   if inpRIGHT', '      rebrand moonmanR', '   endif', '   if inpDOWN', '      rebrand moonmanD', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self x_vel self.jumpstrength', 'endif', 'if not inpA', '   set self x_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec applyTraction', 'exec applyGrav', 'if self.y_vel > 0', '   set self direction 1', 'endif', 'if self.y_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.y_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.y_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self y_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self x_vel self.rolloutstrength', 'endif', 'if self.y_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self y_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self x_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self x_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self y_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self y_vel self.slideflipxmod * self.direction', 'set self x_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self y_vel self.y_vel - self.airdrift', '\tif self.y_vel < self.negairspeedcontrol', '      \t   set self y_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self y_vel self.y_vel + self.airdrift', '      if self.y_vel > self.airspeedcontrol', '      \t set self y_vel self.airspeedcontrol', '      endif', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.y_vel > 0', '      set self direction 1', '   endif', '   if self.y_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'XCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self x_vel 0', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.x_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self x_vel self.x_vel - self.grav', 'if self.x_vel > self.limit', '   set self x_vel self.limit', 'endif', 'if self.x_vel < self.neglimit', '   set self x_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.y_vel != 0', '   if self.y_vel > 0', '      set self y_vel self.traction + self.y_vel', '   endif', '   if self.y_vel < 0', '      set self y_vel self.traction * -1 + self.y_vel', '   endif', 'endif', 'if abs self.y_vel / 1 == 0', '   set self y_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'moonmanU': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength 17', 'set self hopstrength 12', 'set self divestrength 14', 'set self rolloutstrength 8', 'set self bonkstrength 2', 'set self walljumpstrength 12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength 24', 'set self longjumpystrength 9', 'set self longjumpxstrength 12', '', 'set self rotation 180', 'set self can_die 1', '', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.x_vel != 0', '   set self state SLIDE', 'endif', 'if self.y_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.x_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.x_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.x_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self y_vel self.longjumpystrength', 'set self x_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.x_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self x_vel self.x_vel - self.airdrift', 'endif', 'set self calc1 self.x_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self x_vel self.x_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self x_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.x_vel != 0', '   exec applyTraction', '   set self absxvel abs self.x_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.x_vel < self.speed', '   set self calc1 self.x_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.x_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.y_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.y_vel', 'if not self.calc1 nor self.calc2', '   if inpLEFT', '      rebrand moonmanL', '   endif', '   if inpRIGHT', '      rebrand moonmanR', '   endif', '   if inpDOWN', '      rebrand moonmanD', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump0', 'endif', 'if self.calc2', '   img redpantsjump2', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self y_vel self.jumpstrength', 'endif', 'if not inpA', '   set self y_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if self.x_vel > 0', '   set self direction 1', 'endif', 'if self.x_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.x_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self x_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self y_vel self.rolloutstrength', 'endif', 'if self.x_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self x_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self y_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self y_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self x_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self x_vel self.slideflipxmod * self.direction', 'set self y_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self x_vel self.x_vel - self.airdrift', '\tif self.x_vel < self.negairspeedcontrol', '      \t   set self x_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self x_vel self.x_vel + self.airdrift', '      if self.x_vel > self.airspeedcontrol', '      \t set self x_vel self.airspeedcontrol', '      endif', '   endif', 'endif', '', ''], 'XCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.x_vel > 0', '      set self direction 1', '   endif', '   if self.x_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.y_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self y_vel self.y_vel - self.grav', 'if self.y_vel > self.limit', '   set self y_vel self.limit', 'endif', 'if self.y_vel < self.neglimit', '   set self y_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.x_vel != 0', '   if self.x_vel > 0', '      set self x_vel self.traction + self.x_vel', '   endif', '   if self.x_vel < 0', '      set self x_vel self.traction * -1 + self.x_vel', '   endif', 'endif', 'if abs self.x_vel / 1 == 0', '   set self x_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}, 'moonmanR': {'START:0': ['', 'set self state IDLE', 'set self frame 0', 'set self speed 8', 'set self jumpstrength -17', 'set self hopstrength -12', 'set self divestrength 14', 'set self rolloutstrength -8', 'set self bonkstrength 2', 'set self walljumpstrength -12', 'set self walljumpoff 10', 'set self airdrift 0.7', 'set self traction 0.6 * -1', 'set self limit 20', 'set self airspeedcontrol 12', 'set self negairspeedcontrol self.airspeedcontrol * -1', 'set self negspeed self.speed * -1', 'set self neglimit self.limit * -1', 'set self grav 1', 'set self slideflipxmod 3', 'set self slideflipstrength -24', 'set self longjumpystrength -9', 'set self longjumpxstrength 12', '', 'set self rotation 90', 'set self can_die 1', '', ''], 'DEAD:0': ['', 'set self x_vel 0', 'set self y_vel 0', 'set self can_die 0', ''], 'DEAD:45': ['', 'set self state IDLE', 'self self frame 0', 'set self x self.respawnx', 'set self y self.respawny', 'set self can_die 1', ''], 'IDLE:0': ['', 'exec checkAir', 'if self.y_vel != 0', '   set self state SLIDE', 'endif', 'if self.x_vel == 0', '   if not inpRIGHT and inpLEFT', '      set self state RUNNING', '      set self frame 0', '      set self direction -1', '   endif', '   if not inpLEFT and inpRIGHT', '      set self state RUNNING', '      set self frame 0', '      set self direction 1', '   endif', 'endif', 'exec checkCrouch', '     exec checkJump', 'exec applyGrav', ''], 'IDLE:32': ['', 'exec IDLE:0', 'set self frame 0', ''], 'CROUCH:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', 'if not inpDOWN', '   if self.y_vel == 0', '      set self state IDLE', '      set self frame 0', '   endif', '   if self.y_vel != 0', '      set self state SLIDE', '      set self frame 0', '   endif', 'endif', '# bufferable pog?', 'if self.y_vel != 0 and inpA', '   set self state LONGJUMPSTART', '   set self frame 0', 'endif', 'set self frame 0', ''], 'LONGJUMPSTART:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'LONGJUMPSTART:2': ['', 'exec LONGJUMPSTART:0', 'set self x_vel self.longjumpystrength', 'set self y_vel self.longjumpxstrength * self.direction', 'set self state LONGJUMP', 'set self frame 0', ''], 'LONGJUMP:0': ['', 'exec applyGrav', 'set self calc1 self.y_vel < self.negairspeedcontrol', 'if not self.calc1 and inpLEFT', '   set self y_vel self.y_vel - self.airdrift', 'endif', 'set self calc1 self.y_vel > self.airspeedcontrol', 'if not self.calc1 and inpRIGHT', '   set self y_vel self.y_vel + self.airdrift', 'endif', ''], 'RUNNING:0': ['', 'set self y_vel self.speed * self.direction', 'set self calc1 self.direction == 1 nor inpRIGHT', 'set self calc2 self.direction == -1 nor inpLEFT', 'if inpRIGHT == inpLEFT or self.calc1 or self.calc2', '   set self state SLIDE', '   set self frame 0', 'endif', 'exec checkCrouch', 'exec checkJump', 'exec checkAir', 'exec applyGrav', ''], 'RUNNING:16': ['', 'exec RUNNING:0', 'set self frame 0', ''], 'SLIDE:0': ['', 'if self.y_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', 'if self.y_vel != 0', '   exec applyTraction', '   set self absxvel abs self.y_vel', '   if abs self.traction * 10 > self.absxvel', '      img redpantsslide1', '   endif', '   exec checkCrouch', '   exec checkJump', '   if self.state == JUMPSQUAT', '      if self.direction == 1 and inpLEFT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '      if self.direction == -1 and inpRIGHT', '      \t set self state FLIPSQUAT', '\t set self frame 0', '      endif', '   endif', '   exec checkAir', '   exec applyGrav', 'endif', 'if abs self.y_vel < self.speed', '   set self calc1 self.y_vel > 0 and inpRIGHT', '   set self calc1 not inpLEFT and self.calc1', '   if self.calc1', '      set self direction 1', '   endif', '   if not inpRIGHT and self.y_vel < 0 and inpLEFT', '      set self direction -1', '   endif', '   if not inpRIGHT and self.y_vel < 0 and inpLEFT or self.calc1', '      set self state RUNNING', '      set self frame 0', '   endif', 'endif', ''], 'AIRIAL:0': ['', 'set self calc1 self.x_vel > self.airspeedcontrol', 'set self calc2 self.airspeedcontrol * -1 > self.x_vel', 'if not self.calc1 nor self.calc2', '   if inpUP', '      rebrand moonmanU', '   endif', '   if inpLEFT', '      rebrand moonmanL', '   endif', '   if inpDOWN', '      rebrand moonmanD', '   endif', '   if B_DOWN in inpEVENTS', '      set self state DIVESTART', '      set self frame 0', '   endif', 'endif', 'if self.calc1', '   img redpantsjump2', 'endif', 'if self.calc2', '   img redpantsjump0', 'endif', 'exec applyGrav', ''], 'JUMPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'JUMPSQUAT:6': ['', 'set self state AIRIAL', 'if inpA', '   set self x_vel self.jumpstrength', 'endif', 'if not inpA', '   set self x_vel self.hopstrength', 'endif', 'set self frame 0', ''], 'LANDING:0': ['', 'exec applyTraction', 'exec applyGrav', 'if self.y_vel > 0', '   set self direction 1', 'endif', 'if self.y_vel < 0', '   set self direction -1', 'endif', ''], 'LANDING:5': ['', 'if self.y_vel', '   set self state SLIDE', '   exec SLIDE:0', 'endif', 'if self.y_vel == 0', '   set self state IDLE', '   exec IDLE:0', 'endif', ''], 'DIVESTART:0': ['', 'set self y_vel 0', 'set self x_vel 0', ''], 'DIVESTART:5': ['', 'set self y_vel self.divestrength * self.direction', 'set self state DIVE', ''], 'DIVE:0': ['', 'exec applyGrav', ''], 'DIVELAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', '# bufferable Pog?', 'if inpA', '   set self state ROLLOUT', '   set self frame 0', '   set self x_vel self.rolloutstrength', 'endif', 'if self.y_vel == 0', '   set self state IDLE', '   set self frame 0', 'endif', ''], 'ROLLOUT:0': ['', 'exec applyGrav', ''], 'BONK:0': ['', 'set self y_vel self.bonkstrength * self.direction * -1', 'exec applyGrav', ''], 'BONKLAND:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'BONKLAND:25': ['', 'set self state IDLE', 'set self frame 0', ''], 'WALLTOUCH:0': ['', 'exec AIRIAL:0', 'set self state AIRIAL', 'if not self.calc1 nor self.calc2', '   img redpantswalljump0', '   # bufferable pog?', '   if inpA', '      set self state WALLJUMP', '      set self frame 0', '   endif', 'endif', ''], 'WALLJUMP:0': ['', 'set self x_vel 0', ''], 'WALLJUMP:6': ['', 'set self state AIRIAL', 'set self frame 0', 'set self x_vel self.walljumpstrength', 'set self direction self.direction * -1', 'set self y_vel self.walljumpoff * self.direction', ''], 'FLIPSQUAT:0': ['', 'exec checkAir', 'exec applyTraction', 'exec applyGrav', ''], 'FLIPSQUAT:6': ['', 'set self state SLIDEFLIP', 'set self direction self.direction * -1', 'set self y_vel self.slideflipxmod * self.direction', 'set self x_vel self.slideflipstrength', 'set self frame 0', ''], 'SLIDEFLIP:0': ['', 'exec applyGrav', 'if self.direction == -1', '   if inpLEFT', '      \tset self y_vel self.y_vel - self.airdrift', '\tif self.y_vel < self.negairspeedcontrol', '      \t   set self y_vel self.negairspeedcontrol', '   \tendif', '   endif', 'endif', 'if self.direction == 1', '   if inpRIGHT', '      set self y_vel self.y_vel + self.airdrift', '      if self.y_vel > self.airspeedcontrol', '      \t set self y_vel self.airspeedcontrol', '      endif', '   endif', 'endif', ''], 'YCOLLISION': ['', 'set self calc1 self.state == DIVE', 'set self calc1 self.state == DIVELAND or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == ROLLOUT or self.calc1', '   set self state BONK', '   set self frame 0', 'endif', 'set self calc1 self.state == SLIDEFLIP', 'if self.state == AIRIAL or self.calc1', '   set self state WALLTOUCH', '   set self frame 0', '   if self.y_vel > 0', '      set self direction 1', '   endif', '   if self.y_vel < 0', '      set self direction -1', '   endif', 'endif', ''], 'XCOLLISION': ['', 'set self calc1 self.state == ROLLOUT', 'set self calc1 self.state == SLIDEFLIP or self.calc1', 'set self calc1 self.state == LONGJUMP or self.calc1', 'if self.state == AIRIAL or self.calc1', '   set self x_vel 0', '   set self state LANDING', '   set self frame 0', 'endif', 'if self.state == DIVE', '   set self state DIVELAND', '   set self frame 0', 'endif', 'if self.state == BONK', '   set self state BONKLAND', '   set self frame 0', 'endif', ''], 'COLLIDE': ['', 'if self.state == PLATFORM', '   set self touched 1', 'endif', 'set self calc self.state == BANANA', 'set self calc self.state == CHEESE or self.calc', 'if self.state == COIN or self.calc', '   set self collected 1', 'endif', ''], 'checkAir': ['', 'if self.x_vel', '   set self state AIRIAL', '   set self frame 0', 'endif', ''], 'applyGrav': ['', 'set self x_vel self.x_vel + self.grav', 'if self.x_vel > self.limit', '   set self x_vel self.limit', 'endif', 'if self.x_vel < self.neglimit', '   set self x_vel self.neglimit', 'endif', ''], 'applyTraction': ['', 'if self.y_vel != 0', '   if self.y_vel > 0', '      set self y_vel self.traction + self.y_vel', '   endif', '   if self.y_vel < 0', '      set self y_vel self.traction * -1 + self.y_vel', '   endif', 'endif', 'if abs self.y_vel / 1 == 0', '   set self y_vel 0', 'endif', ''], 'checkCrouch': ['', 'if inpDOWN', '   set self state CROUCH', '   set self frame 0', 'endif', ''], 'checkJump': ['', 'if A_DOWN in inpEVENTS', '   set self state JUMPSQUAT', '   set self frame 0', 'endif', '']}}